import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Camera, Smartphone, Monitor, HelpCircle, CheckCircle, AlertTriangle } from "lucide-react";

interface CameraPermissionGuideProps {
  isOpen: boolean;
  onClose: () => void;
}

export function CameraPermissionGuide({ isOpen, onClose }: CameraPermissionGuideProps) {
  const [selectedBrowser, setSelectedBrowser] = useState<string>("");

  const getBrowserInfo = () => {
    const userAgent = navigator.userAgent.toLowerCase();
    
    if (userAgent.includes('chrome')) {
      return { name: 'Chrome', icon: 'üåê' };
    } else if (userAgent.includes('firefox')) {
      return { name: 'Firefox', icon: 'ü¶ä' };
    } else if (userAgent.includes('safari')) {
      return { name: 'Safari', icon: 'üß≠' };
    } else if (userAgent.includes('edge')) {
      return { name: 'Edge', icon: 'üåä' };
    } else {
      return { name: 'Browser', icon: 'üåê' };
    }
  };

  const browserInfo = getBrowserInfo();
  const isMobile = /android|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent);

  const chromeSteps = [
    {
      icon: "üîí",
      title: "Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng kh√≥a",
      description: "T√¨m bi·ªÉu t∆∞·ª£ng kh√≥a üîí ho·∫∑c camera üì∑ b√™n tr√°i thanh ƒë·ªãa ch·ªâ"
    },
    {
      icon: "üì∑", 
      title: "Ch·ªçn Camera",
      description: "Nh·∫•n v√†o 'Camera' v√† ch·ªçn 'Cho ph√©p' (Allow)"
    },
    {
      icon: "üîÑ",
      title: "L√†m m·ªõi trang",
      description: "Nh·∫•n F5 ho·∫∑c n√∫t refresh ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi"
    }
  ];

  const safariSteps = [
    {
      icon: "‚öôÔ∏è",
      title: "M·ªü Safari Settings",
      description: "Nh·∫•n Safari > Preferences > Websites > Camera"
    },
    {
      icon: "‚úÖ",
      title: "Cho ph√©p Camera",
      description: "T√¨m website hi·ªán t·∫°i v√† ƒë·ªïi th√†nh 'Allow'"
    },
    {
      icon: "üîÑ",
      title: "Reload trang",
      description: "Quay l·∫°i trang v√† l√†m m·ªõi"
    }
  ];

  const firefoxSteps = [
    {
      icon: "üîí",
      title: "Nh·∫•n v√†o Shield icon",
      description: "T√¨m bi·ªÉu t∆∞·ª£ng shield b√™n tr√°i thanh ƒë·ªãa ch·ªâ"
    },
    {
      icon: "üì∑",
      title: "Camera Permissions", 
      description: "Nh·∫•n v√†o 'Camera' v√† ch·ªçn 'Allow'"
    },
    {
      icon: "üîÑ",
      title: "Refresh page",
      description: "L√†m m·ªõi trang ƒë·ªÉ √°p d·ª•ng"
    }
  ];

  const getStepsForBrowser = () => {
    switch (browserInfo.name) {
      case 'Safari':
        return safariSteps;
      case 'Firefox':
        return firefoxSteps;
      default:
        return chromeSteps;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-lg max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Camera className="w-5 h-5 text-blue-600" />
            H∆∞·ªõng d·∫´n c·∫•p quy·ªÅn Camera
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Browser Detection */}
          <div className="flex items-center gap-2 p-3 bg-blue-50 rounded-lg">
            <span className="text-2xl">{browserInfo.icon}</span>
            <div>
              <p className="font-medium">Tr√¨nh duy·ªát hi·ªán t·∫°i: {browserInfo.name}</p>
              <p className="text-sm text-gray-600">
                {isMobile ? "üì± Mobile Device" : "üíª Desktop Device"}
              </p>
            </div>
          </div>

          {/* Quick Checks */}
          <div className="space-y-3">
            <h3 className="font-medium flex items-center gap-2">
              <CheckCircle className="w-4 h-4 text-green-600" />
              Ki·ªÉm tra nhanh
            </h3>
            
            <div className="space-y-2 text-sm">
              <div className="flex items-center gap-2">
                <Badge variant={window.location.protocol === 'https:' || window.location.hostname === 'localhost' ? 'default' : 'destructive'} className="text-xs">
                  {window.location.protocol === 'https:' || window.location.hostname === 'localhost' ? '‚úÖ HTTPS/Localhost' : '‚ùå HTTP'}
                </Badge>
                <span className="text-gray-600">Camera c·∫ßn HTTPS ho·∫∑c localhost</span>
              </div>
              
              <div className="flex items-center gap-2">
                <Badge variant={navigator.mediaDevices ? 'default' : 'destructive'} className="text-xs">
                  {navigator.mediaDevices ? '‚úÖ MediaDevices' : '‚ùå Kh√¥ng h·ªó tr·ª£'}
                </Badge>
                <span className="text-gray-600">Tr√¨nh duy·ªát h·ªó tr·ª£ camera API</span>
              </div>
            </div>
          </div>

          {/* Step by step guide */}
          <div className="space-y-3">
            <h3 className="font-medium flex items-center gap-2">
              <HelpCircle className="w-4 h-4 text-blue-600" />
              H∆∞·ªõng d·∫´n chi ti·∫øt cho {browserInfo.name}
            </h3>
            
            <div className="space-y-3">
              {getStepsForBrowser().map((step, index) => (
                <div key={index} className="flex gap-3 p-3 border rounded-lg">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-sm font-medium text-blue-600">
                      {index + 1}
                    </div>
                  </div>
                  <div>
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-lg">{step.icon}</span>
                      <h4 className="font-medium">{step.title}</h4>
                    </div>
                    <p className="text-sm text-gray-600">{step.description}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Troubleshooting */}
          <div className="space-y-3">
            <h3 className="font-medium flex items-center gap-2">
              <AlertTriangle className="w-4 h-4 text-orange-600" />
              V·∫´n kh√¥ng ho·∫°t ƒë·ªông?
            </h3>
            
            <div className="space-y-2 text-sm">
              <div className="p-3 bg-orange-50 rounded-lg">
                <p className="font-medium mb-2">Th·ª≠ c√°c c√°ch sau:</p>
                <ul className="space-y-1 list-disc list-inside text-gray-700">
                  <li>ƒê√≥ng c√°c ·ª©ng d·ª•ng camera kh√°c (Zoom, Skype, v.v.)</li>
                  <li>Ki·ªÉm tra camera c√≥ ho·∫°t ƒë·ªông v·ªõi ·ª©ng d·ª•ng kh√°c kh√¥ng</li>
                  <li>Th·ª≠ tr√¨nh duy·ªát kh√°c (Chrome, Firefox, Safari)</li>
                  <li>Kh·ªüi ƒë·ªông l·∫°i tr√¨nh duy·ªát</li>
                  <li>Ki·ªÉm tra antivirus c√≥ ch·∫∑n camera kh√¥ng</li>
                </ul>
              </div>
            </div>
          </div>

          {/* Alternative */}
          <div className="p-3 bg-green-50 rounded-lg">
            <p className="font-medium text-green-800 mb-1">üí° Gi·∫£i ph√°p thay th·∫ø</p>
            <p className="text-sm text-green-700">
              N·∫øu camera kh√¥ng ho·∫°t ƒë·ªông, b·∫°n v·∫´n c√≥ th·ªÉ nh·∫≠p m√£ v·∫°ch th·ªß c√¥ng b·∫±ng b√†n ph√≠m ho·∫∑c s·ª≠ d·ª•ng m√°y qu√©t m√£ v·∫°ch chuy√™n d·ª•ng.
            </p>
          </div>

          {/* Action buttons */}
          <div className="flex gap-2 pt-4">
            <Button 
              onClick={onClose}
              variant="outline"
              className="flex-1"
            >
              ƒê√£ hi·ªÉu
            </Button>
            <Button 
              onClick={() => window.location.reload()}
              className="flex-1"
            >
              üîÑ L√†m m·ªõi trang
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}